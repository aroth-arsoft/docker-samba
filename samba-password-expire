#!/usr/bin/python3
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import sys
import argparse
import socket
import subprocess
from datetime import datetime, timedelta, tzinfo
import time
import re
import math

from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email.mime.image import MIMEImage
from email.mime.audio import MIMEAudio
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
import email.encoders
import smtplib
import os

# Yoinked from python docs
ZERO = timedelta(0)
class Utc(tzinfo):
    """UTC

    """
    def utcoffset(self, dt):
        return ZERO

    def tzname(self, dt):
        return "UTC"

    def dst(self, dt):
        return ZERO
UTC = Utc()

# Adapted from http://delete.me.uk/2005/03/iso8601.html
ISO8601_REGEX = re.compile(r"(?P<year>[0-9]{4})((?P<month>[0-9]{2})((?P<day>[0-9]{2})"
    r"((?P<hour>[0-9]{2})(?P<minute>[0-9]{2})((?P<second>[0-9]{2})(\.(?P<fraction>[0-9]+))?)?"
    r"(?P<timezone>Z|(([-+])([0-9]{2}):([0-9]{2})))?)?)?)?"
)
ISO8601_REGEX_WITH_SEP = re.compile(r"(?P<year>[0-9]{4})-((?P<month>[0-9]{2})-((?P<day>[0-9]{2})"
    r"T((?P<hour>[0-9]{2}):(?P<minute>[0-9]{2}):((?P<second>[0-9]{2})(\.(?P<fraction>[0-9]+))?)?"
    r"(?P<timezone>Z|(([-+])([0-9]{2}):([0-9]{2})))?)?)?)?"
)
TIMEZONE_REGEX = re.compile("(?P<prefix>[+-])(?P<hours>[0-9]{2}).(?P<minutes>[0-9]{2})")
TIMEDELTA_REGEX = re.compile(r'((?P<days>\d+?)d)?((?P<hours>\d+?)hr)?((?P<minutes>\d+?)m)?((?P<seconds>\d+?)s)?')

SECONDS_ONE_MINUTE = 60
SECONDS_ONE_HOUR = 60 * SECONDS_ONE_MINUTE
SECONDS_ONE_DAY = 24 * SECONDS_ONE_HOUR
SECONDS_ONE_WEEK = 7 * SECONDS_ONE_DAY
SECONDS_ONE_MONTH = 30 * SECONDS_ONE_DAY
SECONDS_ONE_YEAR = 365 * SECONDS_ONE_DAY

def parse_date(datestring, default_timezone=UTC, encoding='utf8'):
    if datestring is None:
        return None
    """Parses ISO 8601 dates into datetime objects

    The timezone is parsed from the date string. However it is quite common to
    have dates without a timezone (not strictly correct). In this case the
    default timezone specified in default_timezone is used. This is UTC by
    default.
    """
    if isinstance(datestring, bytes):
        datestring = datestring.decode(encoding)
    elif not isinstance(datestring, str):
        raise ParseError("Expecting a string %r (%s)" % (datestring, type(datestring)))
    if '-' in datestring:
        m = ISO8601_REGEX_WITH_SEP.match(datestring)
    else:
        m = ISO8601_REGEX.match(datestring)
    if not m:
        raise ParseError("Unable to parse date string %r" % datestring)
    groups = m.groupdict()
    tz = parse_timezone(groups["timezone"], default_timezone=default_timezone)
    if groups["fraction"] is None:
        groups["fraction"] = 0
    else:
        groups["fraction"] = int(float("0.%s" % groups["fraction"]) * 1e6)
    return datetime(int(groups["year"]), int(groups["month"]), int(groups["day"]),
        int(groups["hour"]), int(groups["minute"]), int(groups["second"]),
        int(groups["fraction"]), tz)

def parse_timedelta(time_str):
    parts = TIMEDELTA_REGEX.match(time_str)
    if not parts:
        return None
    parts = parts.groupdict()
    time_params = {}
    for (name, param) in parts.items():
        if param:
            time_params[name] = int(param)
    return timedelta(**time_params)

def format_timedelta(delta):

    if isinstance(delta, timedelta):
        secs = abs(delta.total_seconds())
        is_negative = delta.total_seconds() < 0
    else:
        secs = abs(delta)
        is_negative = delta < 0
    if secs >= SECONDS_ONE_YEAR:
        years = int(secs / SECONDS_ONE_YEAR)
        remain = math.fmod(secs, SECONDS_ONE_YEAR)
        months = int(remain / SECONDS_ONE_MONTH)
        remain = math.fmod(remain, SECONDS_ONE_MONTH)
        days = int(remain / SECONDS_ONE_DAY)
        ret = '%i years, %i months, %i days' % (years, months, days)
    elif secs >= SECONDS_ONE_MONTH:
        months = int(secs / SECONDS_ONE_MONTH)
        remain = math.fmod(secs, SECONDS_ONE_MONTH)
        days = int(remain / SECONDS_ONE_DAY)
        ret = '%i months, %i days' % (months, days)
    elif secs >= SECONDS_ONE_WEEK:
        days = int(secs / SECONDS_ONE_DAY)
        ret = '%i days' % (days)
    elif secs >= SECONDS_ONE_DAY:
        days = int(secs / SECONDS_ONE_DAY)
        remain = math.fmod(secs, SECONDS_ONE_DAY)
        hours = int(remain / SECONDS_ONE_HOUR)
        ret = '%i days, %i hours' % (days, hours)
    elif secs >= SECONDS_ONE_HOUR:
        hours = int(secs / SECONDS_ONE_HOUR)
        remain = math.fmod(secs, SECONDS_ONE_HOUR)
        minutes = int(remain / SECONDS_ONE_MINUTE)
        ret = '%i hours, %i minutes' % (hours, minutes)
    elif secs >= SECONDS_ONE_MINUTE:
        minutes = int(secs / SECONDS_ONE_MINUTE)
        remain = math.fmod(secs, SECONDS_ONE_MINUTE)
        ret = '%i minutes, %i seconds' % (minutes, remain)
    else:
        ret = '%i seconds' % (secs)
    if is_negative:
        ret += ' ago'
    return ret


def getlogin():
    """:return: string identifying the currently active system user as name@node
    :note: user can be set with the 'USER' environment variable, usually set on windows
    :note: on unix based systems you can use the password database
    to get the login name of the effective process user"""
    if os.name == "posix":
        import pwd
        username = pwd.getpwuid(os.geteuid()).pw_name
    else:
        ukn = 'UNKNOWN'
        username = os.environ.get('USER', os.environ.get('USERNAME', ukn))
        if username == ukn and hasattr(os, 'getlogin'):
            username = os.getlogin()
    return username

class Mail(object):
    COMMASPACE = ', '

    def __init__(self, sender=None, to=[], cc=[], bcc=[], subject=None, bodytext=None, multipart=True):
        self._msg = None
        if sender is None:
            self._from = getlogin()
        else:
            self._from = sender
        self._to = to if to is not None else []
        self._cc = cc if cc is not None else []
        self._bcc = bcc if bcc is not None else []
        self._subject = subject
        self._multipart = multipart
        self._bodytext = bodytext
        self._attachments = []

    class Attachment(object):
        def __init__(self, filename, mimetype=None, attachment_name=None):
            self._msg = None
            self.filename = filename
            # Guess the content type based on the file's extension.  Encoding
            # will be ignored, although we should check for simple things like
            # gzip'd or compressed files.
            if mimetype is None:
                self.mimetype = 'application/octet-stream'
            else:
                self.mimetype = mimetype
            self.mimetype_main, self.mimetype_sub = self.mimetype.split('/', 1)
            # Set the filename parameter
            if attachment_name is None:
                if not hasattr(filename, 'read'):
                    self.name = os.path.basename(filename)
                else:
                    self.name = os.path.basename(filename.name)
            else:
                self.name = attachment_name

        def prepare(self):
            if self._msg is None:
                if hasattr(self.filename, 'read'):
                    fp = self.filename
                else:
                    fp = open(self.filename)
                if self.mimetype_main == 'text':
                    # Note: we should handle calculating the charset
                    self._msg = MIMEText(fp.read(), _subtype=self.mimetype_sub)
                elif self.mimetype_main == 'image':
                    self._msg = MIMEImage(fp.read(), _subtype=self.mimetype_sub)
                elif self.mimetype_main == 'audio':
                    self._msg = MIMEAudio(fp.read(), _subtype=self.mimetype_sub)
                else:
                    self._msg = MIMEBase(self.mimetype_main, self.mimetype_sub)
                    self._msg.set_payload(fp.read())
                    # Encode the payload using Base64
                    email.encoders.encode_base64(self._msg)
                if not hasattr(self.filename, 'read'):
                    fp.close()
                self._msg.add_header('Content-Disposition', 'attachment', filename=self.name)
            return self._msg

    def add_attachment(self, filename, mimetype=None, attachment_name=None):
        self._attachments.append(Mail.Attachment(filename, mimetype, attachment_name))

    def remove_attachment(self, filename=None, attachment_name=None):
        if filename:
            for a in iter(self._attachments):
                if a.filename == filename:
                    del a
        elif attachment_name:
            for a in iter(self._attachments):
                if a.name == attachment_name:
                    del a

    def _prepare(self):
        if self._msg is None:
            if self._multipart:
                self._msg = MIMEMultipart()
                self._msg.preamble = 'You will not see this in a MIME-aware mail reader.\n'
                if self._bodytext is not None:
                    self._msg.attach(MIMEText(self._bodytext))
            else:
                self._msg = MIMEText(self._bodytext if self._bodytext is not None else '')

            self._msg['Subject'] = self._subject
            self._msg['From'] = self._from
            if len(self._to) != 0:
                self._msg['To'] = Mail.COMMASPACE.join(self._to)
            if len(self._cc) != 0:
                self._msg['CC'] = Mail.COMMASPACE.join(self._cc)
            if len(self._bcc) != 0:
                self._msg['BCC'] = Mail.COMMASPACE.join(self._bcc)

            for a in self._attachments:
                self._msg.attach(a.prepare())
        return self._msg

    def __str__(self):
        self._prepare()
        return self._msg.as_string()

    @property
    def multipart(self):
        return self._multipart

    @multipart.setter
    def multipart(self, value):
        self._multipart = value
        self._msg = None

    @property
    def sender(self):
        return self._from

    @sender.setter
    def sender(self, value):
        if value is None:
            self._from = getlogin()
        else:
            self._from = value
        self._msg = None

    @property
    def recipient_to(self):
        return self._to

    @property
    def recipient_cc(self):
        return self._cc

    @property
    def recipient_bcc(self):
        return self._bcc

    @property
    def recipients(self):
        ret = []
        ret.extend(self._to)
        ret.extend(self._cc)
        ret.extend(self._bcc)
        return ret

    @property
    def subject(self):
        return self._subject

    @subject.setter
    def subject(self, value):
        self._subject = value
        self._msg = None

    @property
    def body(self):
        return self._bodytext

    @body.setter
    def body(self, value):
        self._bodytext = value
        self._msg = None

def sendmail(mail, server='localhost', port=25, user=None, password=None, lmtp=False, ssl=False, starttls=False, debuglevel=0):
    try:
        if lmtp:
            s = smtplib.LMTP(server, port)
        elif ssl:
            s = smtplib.SMTP_SSL(server, port)
        else:
            s = smtplib.SMTP(server, port)

        s.set_debuglevel(debuglevel)
        if starttls:
            s.starttls()
        if user is not None:
            s.login(user, password)
        s.sendmail(mail.sender, mail.recipients, str(mail))
        s.quit()
    except ConnectionError as ex:
        sys.stderr.write('SMTP connection to %s:%i error %s.\n' % (server, port, ex))

AD_BEGIN_OF_TIME = datetime(1601, 1, 1).replace(tzinfo=UTC)

def samba_tool(cmd):
    sts = -1
    stdoutdata = None
    stderrdata = None

    args = ['/usr/bin/samba-tool']
    args.extend(cmd)
    p = subprocess.Popen(args, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=None)
    if p:
        (stdoutdata, stderrdata) = p.communicate()
        if stdoutdata is not None:
            stdoutdata = stdoutdata.decode('utf8')
        if stderrdata is not None:
            stderrdata = stderrdata.decode('utf8')
        sts = p.returncode
    return (sts, stdoutdata, stderrdata)

def safeint(s, default_value=None):
    ret = default_value
    if s is not None:
        try:
            ret = int(s)
        except ValueError:
            pass
    return ret

def ad_timestamp(timestamp):
    timestamp = safeint(timestamp)
    if timestamp is not None:
        if timestamp == 0x7FFFFFFFFFFFFFFF or timestamp == 0:
            return None
        return AD_BEGIN_OF_TIME + timedelta(seconds=timestamp/10000000)
    return None

class samba_password_expire(object):

    ADMINISTRATOR_NOTE = """
If you get one or more certificate error in your browser:
- common name in certificate does not match the hostname in the URL.
  This is caused by usage of dynamic DNS.
- certificate was not signed/issued by a trusted CA known to your browser.
  Since your browser does not include the company CA certificate in this list you will get this error
  unless you add the company CA certificate to the list of trusted certificates in your browser. Please
  check the manual of your browser.
These kind of errors can be safely ignored (when you can trust your Administrator) and you can go ahead and
overwrite the browser security warning and continue on to the kpasswd web service.

Your Administrator

PS: If you have any trouble changing your password just reply to this mail to contact your Administrator.
"""

    BODYTEXT = """You %(uid)s receive this message because your password for %(realm)s expires in %(timeleft)s on %(expireat)s.

You have to change your password within the specified time frame. If you do not change your password in the given time,
you will not be able to use the services.

To change your password either use the kpasswd tool from your operating system or use the following web service with your browser:

%(weburl)s
"""
    BODYTEXT_FATAL = """You %(uid)s receive this message because your password for %(realm)s expired at %(expireat)s.

You will not be able to use any services until you change your password.

To change your password either use the kpasswd tool from your operating system or use the following web service with your browser:

%(weburl)s
"""

    SUBJECT_FATAL = 'FATAL: %(uid)s your password has expired %(expireat)s.'
    SUBJECT_CRITICAL = 'CRITICAL: %(uid)s your password expires in %(timeleft)s.'
    SUBJECT_WARNING = 'WARNING: %(uid)s your password expires in %(timeleft)s.'
    SUBJECT_REMINDER = 'REMINDER: %(uid)s your password expires in %(timeleft)s.'

    def __init__(self):
        self._verbose = False
        self._actually_sendmail = True
        self._fqdn = socket.getfqdn()
        self.get_kerberos_realm()
        if '.' in self._fqdn:
            h,d = self._fqdn.split('.',1)
            self._fqdn = (h + '.' + self._default_realm).lower()
        self.get_default_weburl()
        self.get_default_mail_server()

    def get_kerberos_realm(self):
        self._default_realm = None
        try:
            f = open('/etc/krb5.conf')
            for line in f.readlines():
                line = line.strip()
                if '=' in line:
                    k, v = line.split('=', 1)
                    k = k.strip()
                    v = v.strip()
                else:
                    continue
                if k == 'default_realm':
                    self._default_realm =  v

            f.close()
        except IOError:
            pass
        if not self._default_realm:
            self._default_realm = os.environ.get('REALM', None)

    def get_default_weburl(self):
        cpw_url = os.environ.get('WEBURL', '')
        if not cpw_url:
            cpw_url = 'https://' + self._fqdn + '/cpw'
        self._default_weburl = cpw_url

    def get_default_mail_server(self):
        self._default_mail_server = os.environ.get('MAILSERVER', '')
        if not self._default_mail_server:
            self._default_mail_server = self._fqdn + ':25'

    def get_user_list(self):
        ret = []

        (sts, stdoutdata, stderrdata) = samba_tool(['user', 'list'])
        if sts == 0:
            for line in stdoutdata.splitlines():
                ret.append(line.strip())
        return ret

    def get_user(self, username):
        ret = {}
        (sts, stdoutdata, stderrdata) = samba_tool(['user', 'show', '--attributes=*,msDS-UserPasswordExpiryTimeComputed', username])
        if sts == 0:
            for line in stdoutdata.splitlines():
                if not ':' in line:
                    continue
                (key, value) = line.split(': ', 1)
                ret[key] = value
        return ret

    def check_user(self, user_info):
        now = datetime.utcnow().replace(tzinfo=UTC)

        cn = user_info.get('cn', None)
        accountExpires = ad_timestamp(user_info.get('accountExpires', None))
        pwdLastSet = ad_timestamp(user_info.get('pwdLastSet', None))
        passwordExpires = ad_timestamp(user_info.get('msDS-UserPasswordExpiryTimeComputed', None))
        userAccountControl = safeint(user_info.get('userAccountControl', 0))
        userPrincipalName = user_info.get('userPrincipalName', None)
        mailaddr = safeint(user_info.get('mail', None))
        if cn:
            if userAccountControl & 0x02:
                print('account %s is disabled' % cn)
                return False

            if mailaddr is None:
                mailaddr = userPrincipalName

            #print('%s: %s - %s' % (cn, accountExpires, passwordExpires))

            if passwordExpires is not None:
                pwend_diff = passwordExpires - now
            else:
                pwend_diff = None

            if self._verbose:
                if passwordExpires:
                    if pwend_diff < timedelta(0):
                        pwend_str = 'expired at %s %s ago' % ( str(passwordExpires), format_timedelta(pwend_diff))
                    else:
                        pwend_str = '%s in %s' % ( str(passwordExpires), format_timedelta(pwend_diff))
                else:
                    pwend_str = 'No expire date for password available'
                print('%s %s' % (cn, pwend_str))
            if 0:
                if pwend_diff is not None:
                    if pwend_diff < timedelta(0):
                        self._send_message(cn, mailaddr, expireat=passwordExpires, timeleft=pwend_diff, fatal=True)
                    elif pwend_diff < self._critical:
                        self._send_message(cn, mailaddr, expireat=passwordExpires, timeleft=pwend_diff, critical=True)
                    elif pwend_diff < self._warning:
                        self._send_message(cn, mailaddr, expireat=passwordExpires, timeleft=pwend_diff, warning=True)
                    elif pwend_diff < self._reminder:
                        self._send_message(cn, mailaddr, expireat=passwordExpires, timeleft=pwend_diff)
                    else:
                        # no message
                        pass

        return True

    def _ldap_run(self):
        import ldap
        now = datetime.utcnow().replace(tzinfo=UTC)

        searchBase = self._base
        searchFilter = '(&(objectClass=krb5KDCEntry)(krb5PasswordEnd=*))'
        attrsFilter = ['uid', 'krb5PrincipalName','krb5PasswordEnd', 'mail', 'sambaAcctFlags']
        if self._verbose:
            print('Search %s (%s)' % (searchBase, searchFilter))

        result_set = self._ldap_search(searchBase, searchFilter, attrsFilter, ldap.SCOPE_SUBTREE)
        if result_set is not None:
            if not result_set:
                if self._verbose:
                    print('Empty result set')

            for rec in result_set:
                (dn, values) = rec[0]
                uid = values['uid'][0]
                princ = values['krb5PrincipalName'][0]
                if 'krb5PasswordEnd' in values:
                    pwend = parse_date(values['krb5PasswordEnd'][0])
                else:
                    pwend = None
                if 'mail' in values:
                    mailaddr = values['mail'][0]
                else:
                    mailaddr = None
                if 'sambaAcctFlags' in values:
                    sambaAcctFlags = values['sambaAcctFlags'][0]
                else:
                    sambaAcctFlags = ''
                disabled = True if 'D' in sambaAcctFlags else False

                if disabled:
                    if self._verbose:
                        print('%s (%s) account disabled' % (uid, princ))
                    continue

                if pwend is not None:
                    pwend_diff = pwend - now
                else:
                    pwend_diff = None

                if self._verbose:
                    if pwend:
                        if pwend_diff < timedelta(0):
                            pwend_str = 'expired at %s %s ago' % ( str(pwend), format_timedelta(pwend_diff))
                        else:
                            pwend_str = '%s in %s' % ( str(pwend), format_timedelta(pwend_diff))
                    else:
                        pwend_str = 'No expire date for password available'
                    print('%s (%s) %s' % (uid, princ, pwend_str))
                if 1:
                    if pwend_diff is not None:
                        if pwend_diff < timedelta(0):
                            self._send_message(uid, mailaddr, expireat=pwend, timeleft=pwend_diff, fatal=True)
                        elif pwend_diff < self._critical:
                            self._send_message(uid, mailaddr, expireat=pwend, timeleft=pwend_diff, critical=True)
                        elif pwend_diff < self._warning:
                            self._send_message(uid, mailaddr, expireat=pwend, timeleft=pwend_diff, warning=True)
                        elif pwend_diff < self._reminder:
                            self._send_message(uid, mailaddr, expireat=pwend, timeleft=pwend_diff)
                        else:
                            # no message
                            pass
            ret = 0
        else:
            sys.stderr.write('Nothing found.\n')
            ret = 2
        return ret

    def _send_message(self, uid, mailaddr, expireat, timeleft, critical=False, warning=False, fatal=False):
        timeleft_text = format_timedelta(timeleft)
        message_details = {'uid':uid, 'realm':self._realm, 'weburl':self._weburl,
                           'expireat':str(expireat), 'timeleft':timeleft_text }
        if fatal:
            bodytext = self.BODYTEXT_FATAL % message_details
        else:
            bodytext = self.BODYTEXT % message_details
        # add common administrator note
        bodytext += self.ADMINISTRATOR_NOTE % message_details
        if fatal:
            subject = self.SUBJECT_FATAL % message_details
        elif critical:
            subject = self.SUBJECT_CRITICAL % message_details
        elif warning:
            subject = self.SUBJECT_WARNING % message_details
        else:
            subject = self.SUBJECT_REMINDER % message_details

        if not mailaddr:
            # send message to root to always get a message out to someone
            mailaddr = 'root'

        # assume everything goes as planned
        ret = True
        msg = Mail(sender=self._sender, to=[mailaddr], subject=subject, bodytext=bodytext)
        if self._actually_sendmail:
            if ':' in self._mail_server:
                server, port = self._mail_server.split(':')
                port = safeint(port, 25)
            else:
                server = self._mail_server
                port = 25
            sendmail(msg, server=server, port=port)
        else:
            if self._verbose:
                print(msg)
        return ret

    def main(self):
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='shows information about expiring password in the Samba AD.')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')
        parser.add_argument('--check-message', dest='check_message_only', action='store_true', help='Do not use any real data, just check if the messages are ok.')
        parser.add_argument('--noop', dest='noop', action='store_true', help='do not actually send mails, just test.')
        parser.add_argument('--reminder', dest='reminder', type=str, default='60d', help='specify the time when a reminder message will be sent.')
        parser.add_argument('--warn', dest='warning', type=str, default='30d', help='specify the time when a warning message will be sent.')
        parser.add_argument('--crit', dest='critical', type=str, default='8d', help='specify the time when a critical message will be sent.')
        parser.add_argument('--sender', dest='sender', type=str, default='root', help='specify the sender mail address.')
        parser.add_argument('--realm', dest='realm', type=str, default=self._default_realm, help='specify the name of the service in the message.')
        parser.add_argument('--weburl', dest='weburl', type=str, default=self._default_weburl, help='specify URL for change password web service')
        parser.add_argument('--mail-server', dest='mail_server', type=str, default=self._default_mail_server, help='specify name (and port) for the mail server')
        parser.add_argument('--user', dest='user', type=str, default=None, nargs='+', help='select a single user for testing')

        args = parser.parse_args()

        self._verbose = args.verbose
        if args.noop:
            self._actually_sendmail = False

        self._sender = args.sender
        self._realm = args.realm
        self._weburl = args.weburl
        self._mail_server = args.mail_server
        self._reminder = parse_timedelta(args.reminder)
        self._warning = parse_timedelta(args.warning)
        self._critical = parse_timedelta(args.critical)
        self._check_message_only = args.check_message_only
        if self._verbose:
            print('fqdn: ' + str(self._fqdn))
            print('mail sender: ' + str(self._sender))
            print('mail server: ' + str(self._mail_server))
            print('realm: ' + str(self._realm))
            print('web url: ' + str(self._weburl))
            print('reminder: ' + str(self._reminder))
            print('warning: ' + str(self._warning))
            print('critical: ' + str(self._critical))

        if self._check_message_only:
            now = datetime.utcnow()
            uid = getlogin()
            self._send_message(uid=uid, mailaddr=uid, expireat=now, timeleft=timedelta(0), critical=True, warning=False, fatal=False)
            return 0

        ret = 0
        if args.user:
            users = args.user
        else:
            users = self.get_user_list()
        if self._verbose:
            print('Users: %s' % ','.join(users))
        for u in users:
            user = self.get_user(username=u)
            if user is not None:
                self.check_user(user)

        return ret

if __name__ == "__main__":
    app =  samba_password_expire()
    sys.exit(app.main())

